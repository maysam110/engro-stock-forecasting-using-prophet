# -*- coding: utf-8 -*-
"""PF ASSESMENT 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OYTd7pEosAbwqSnpyvpmyJehMC6oelmu
"""

import yfinance as yf

ticker = yf.Ticker("ENGRO.KA")
data = ticker.history(period="5y")
data.to_csv("engro_psx.csv")

import plotly.graph_objects as go

fig = go.Figure(data=[go.Candlestick(x=data.index,
                open=data['Open'], high=data['High'],
                low=data['Low'], close=data['Close'])])
fig.update_layout(title='ENGRO PSX Candlestick Chart')
fig.show()

from prophet import Prophet
import pandas as pd

# Assuming you've already loaded data
df = data.reset_index()[['Date', 'Close']]
df.columns = ['ds', 'y']

# Remove timezone
df['ds'] = pd.to_datetime(df['ds']).dt.tz_localize(None)

# Fit model
model = Prophet()
model.fit(df)

# Predict future
future = model.make_future_dataframe(periods=750)
forecast = model.predict(future)

target_dates = ['2025-09-01', '2025-12-01', '2026-06-01']

for target in target_dates:
    target_date = pd.to_datetime(target)
    future_rows = forecast[forecast['ds'] >= target_date]

    if not future_rows.empty:
        closest_row = future_rows.iloc[0]
        date_str = closest_row['ds'].strftime('%Y-%m-%d')
        predicted_price = round(closest_row['yhat'], 2)
        print(f"📈 Predicted price closest to {target}: {predicted_price} PKR on {date_str}")
    else:
        print(f"⚠️ No prediction available for or after {target}. Increase prediction range.")

investment_date = pd.to_datetime('2025-06-01')
investment_amount = 10000

# Find predicted price on investment date
investment_row = forecast[forecast['ds'] >= investment_date].iloc[0]
investment_price = investment_row['yhat']

# Target dates for selling
target_dates = ['2025-09-01', '2025-12-01', '2026-06-01']

# Calculate and print returns
for target in target_dates:
    target_date = pd.to_datetime(target)
    future_rows = forecast[forecast['ds'] >= target_date]

    if not future_rows.empty:
        target_row = future_rows.iloc[0]
        target_price = target_row['yhat']
        date_str = target_row['ds'].strftime('%Y-%m-%d')

        # Calculate returns
        shares_bought = investment_amount / investment_price
        value_on_target_date = shares_bought * target_price
        profit = value_on_target_date - investment_amount

        print(f"💰 On {date_str}, your investment would be worth: {value_on_target_date:.2f} PKR")
        print(f"📈 Profit: {profit:.2f} PKR (from 10,000 PKR)\n")
    else:
        print(f"⚠️ No forecast available for {target}")

from sklearn.metrics import mean_absolute_error, mean_squared_error
import numpy as np

# Merge actual and predicted values for dates present in the historical data
merged = df.merge(forecast[['ds', 'yhat']], on='ds')

# Extract actual and predicted values
actual_values = merged['y']
predicted_values = merged['yhat']

# Mean Absolute Error (MAE)
mae = mean_absolute_error(actual_values, predicted_values)

# Mean Squared Error (MSE) and Root Mean Squared Error (RMSE)
mse = mean_squared_error(actual_values, predicted_values)
rmse = np.sqrt(mse)

# Mean Absolute Percentage Error (MAPE)
mape = np.mean(np.abs((actual_values - predicted_values) / actual_values)) * 100

# Print error metrics
print(f"📉 Mean Absolute Error (MAE): {mae:.2f}")
print(f"📉 Root Mean Squared Error (RMSE): {rmse:.2f}")
print(f"📉 Mean Absolute Percentage Error (MAPE): {mape:.2f}%")
print(f"📊 Error Rate of the model: {mape:.2f}%")